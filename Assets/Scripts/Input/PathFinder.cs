//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PathFinder.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PathFinder: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PathFinder()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PathFinder"",
    ""maps"": [
        {
            ""name"": ""Path"",
            ""id"": ""a1f29ffa-2e3e-4c34-a9f1-7c7fc86a37f1"",
            ""actions"": [
                {
                    ""name"": ""NextStep"",
                    ""type"": ""Button"",
                    ""id"": ""35438dfd-a15a-417f-afbe-c2f38ce42af4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a9a63888-e09c-4c59-8cf8-0f061fc71f7a"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Scheme1"",
                    ""action"": ""NextStep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Scheme1"",
            ""bindingGroup"": ""Scheme1"",
            ""devices"": []
        }
    ]
}");
        // Path
        m_Path = asset.FindActionMap("Path", throwIfNotFound: true);
        m_Path_NextStep = m_Path.FindAction("NextStep", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Path
    private readonly InputActionMap m_Path;
    private List<IPathActions> m_PathActionsCallbackInterfaces = new List<IPathActions>();
    private readonly InputAction m_Path_NextStep;
    public struct PathActions
    {
        private @PathFinder m_Wrapper;
        public PathActions(@PathFinder wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextStep => m_Wrapper.m_Path_NextStep;
        public InputActionMap Get() { return m_Wrapper.m_Path; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PathActions set) { return set.Get(); }
        public void AddCallbacks(IPathActions instance)
        {
            if (instance == null || m_Wrapper.m_PathActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PathActionsCallbackInterfaces.Add(instance);
            @NextStep.started += instance.OnNextStep;
            @NextStep.performed += instance.OnNextStep;
            @NextStep.canceled += instance.OnNextStep;
        }

        private void UnregisterCallbacks(IPathActions instance)
        {
            @NextStep.started -= instance.OnNextStep;
            @NextStep.performed -= instance.OnNextStep;
            @NextStep.canceled -= instance.OnNextStep;
        }

        public void RemoveCallbacks(IPathActions instance)
        {
            if (m_Wrapper.m_PathActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPathActions instance)
        {
            foreach (var item in m_Wrapper.m_PathActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PathActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PathActions @Path => new PathActions(this);
    private int m_Scheme1SchemeIndex = -1;
    public InputControlScheme Scheme1Scheme
    {
        get
        {
            if (m_Scheme1SchemeIndex == -1) m_Scheme1SchemeIndex = asset.FindControlSchemeIndex("Scheme1");
            return asset.controlSchemes[m_Scheme1SchemeIndex];
        }
    }
    public interface IPathActions
    {
        void OnNextStep(InputAction.CallbackContext context);
    }
}
